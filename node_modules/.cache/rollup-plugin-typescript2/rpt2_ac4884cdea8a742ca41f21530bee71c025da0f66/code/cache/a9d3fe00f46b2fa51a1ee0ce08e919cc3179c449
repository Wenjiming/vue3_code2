{"code":"// 事件 @click=\"fn\" @click=\"fn1\"\n// 一个元素的绑定事件 addEventListener ,不能直接覆盖\n// 缓存（click:fn)\nexport const patchEvent = (el, key, value) => {\n    // 1.对函数缓存\n    const invokers = el._vei || (el._vei = {});\n    const exists = invokers[key];\n    if (exists && value) {\n        exists.value = value; // 指向最新的事件\n    }\n    else {\n        // 获取事件名称 1）新的有 2）新的没有\n        const eventName = key.slice(2).toLowerCase();\n        if (value) {\n            let invoker = invokers[eventName] = createInvoker(value);\n            el.addEventListener(eventName, invoker);\n        }\n        else { // 没有 删除\n            el.removeEventListener(eventName, exists);\n            invokers[eventName] = undefined;\n        }\n    }\n};\nfunction createInvoker(value) {\n    const fn = (e) => {\n        fn.value(e);\n    };\n    fn.value = value;\n    return fn;\n}\n//# sourceMappingURL=event.js.map","references":[],"map":"{\"version\":3,\"file\":\"event.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../packages/runtime-dom/src/modules/event.ts\"],\"names\":[],\"mappings\":\"AACA,8BAA8B;AAC9B,qCAAqC;AACrC,eAAe;AACf,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,EAAE,EAAC,GAAG,EAAC,KAAK,EAAE,EAAE;IACzC,UAAU;IACV,MAAM,QAAQ,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,CAAA;IAC1C,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;IAC5B,IAAI,MAAM,IAAI,KAAK,EAAE;QACnB,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,UAAU;KACjC;SAAM;QACL,sBAAsB;QACtB,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;QAC5C,IAAI,KAAK,EAAE;YACT,IAAI,OAAO,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAA;YACxD,EAAE,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;SACxC;aAAM,EAAC,QAAQ;YACd,EAAE,CAAC,mBAAmB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;YACzC,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;SACjC;KACF;AACH,CAAC,CAAA;AACD,SAAS,aAAa,CAAC,KAAK;IAC1B,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE;QACf,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACb,CAAC,CAAA;IACD,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;IACjB,OAAO,EAAE,CAAC;AACZ,CAAC\"}"}
